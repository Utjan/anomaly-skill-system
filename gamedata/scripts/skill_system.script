--[[
	Haruka Skill System 
	Early Alpha
	
	Credits: arti, RavenAscendant
	20/05/2021
]]
--LEVELS-----------------------------------------------------------------------------------------
local level_endurance = {
    {"endurance_level_0", 0, 0.75, 0.5, 0.6},
    {"endurance_level_1", 200, 0.8, 0.75, 0.55},
    {"endurance_level_2", 500, 0.9, 1, 0.5},
    {"endurance_level_3", 1000, 1.00, 1.1, 0.45},
    {"endurance_level_4", 2000, 1.05, 1.2, 0.4},
    {"endurance_level_5", 3000, 1.10, 1.3, 0.35},
    {"endurance_level_6", 4000, 1.15, 1.4, 0.3},
    {"endurance_level_7", 5000, 1.20, 1.5, 0.25}
}

--[[
v[1] alife info, that would be used in the future for perks
v[2] exp requirement
v[3] speed modifier
v[4] weight
v[5] power loss bias
]]
local level_trading = {
    {"trading_level_0", 0, 1.3, 0.85},
    {"trading_level_1", 200, 1.25, 0.9},
    {"trading_level_2", 500, 1.2, 0.95},
    {"trading_level_3", 1000, 1.15, 1},
    {"trading_level_4", 2000, 1.10, 1.1},
    {"trading_level_5", 3000, 1, 1.15},
    {"trading_level_6", 4000, 0.95, 1.2},
    {"trading_level_7", 5000, 0.9, 1.25}
}

--[[
v[1] alife info
v[2] exp requirement
v[3] buy coef
v[4] sell coef
]]
local level_resilience = {
    {"resilience_level_0", 0, 0, 0},
    {"resilience_level_1", 200, 0.0005, 2},
    {"resilience_level_2", 500, 0.001, 4},
    {"resilience_level_3", 1000, 0.0015, 6},
    {"resilience_level_4", 2000, 0.002, 8},
    {"resilience_level_5", 3000, 0.0025, 10},
    {"resilience_level_6", 4000, 0.003, 12},
    {"resilience_level_7", 5000, 0.0035, 15}
}

--[[
v[1] alife info
v[2] exp requirement
v[3] regen
]]
exp_table = {}

--STORAGE----------------------------------------------------------------------------------------
function on_game_load()
    if (not exp_table.endurance_exp) then
        exp_table.endurance_exp = 0
        exp_table.trading_exp = 0
        exp_table.resilience_exp = 0
    end
end

function save_state(m_data)
    m_data.exp_table = exp_table
end

function load_state(m_data)
    exp_table = m_data.exp_table or {}
end

--EXP GAIN---------------------------------------------------------------------------------------
local MUL = 1 -- exp gain multiplier

function actor_on_before_hit(shit)
    if shit.power < 0 or shit.type == 3 then return end
	--printf('%s', shit.type)
    exp_table.resilience_exp = exp_table.resilience_exp + (shit.power * 30 * MUL)

    --printf("Resilience exp: " .. "%s", exp_table.resilience_exp)
    for k, v in pairs(level_resilience) do
        if not has_alife_info(v[1]) and exp_table.resilience_exp >= v[2] then
            give_info(v[1])
            exp_table.resilience_regen = v[3]
            exp_table.crit_chance = v[4]
            --printf("gave info:" .. v[1])
            break
        end
    end
end

function calc_trading_exp(item)
    local item = item:section()
    local price = SYS_GetParam(0, item, "cost")
    exp_table.trading_exp = exp_table.trading_exp + (price / 1000 * MUL)

    --printf("Traded item: " .. "%s" .. "cost: " .. "%s", item, price)
    --printf("Trading exp: " .. "%s", exp_table.trading_exp)
    for k, v in pairs(level_trading) do
        if not has_alife_info(v[1]) and exp_table.trading_exp >= v[2] then
            give_info(v[1])
            exp_table.buy_skill = v[3]
            exp_table.sell_skill = v[4]
            --printf("gave info:" .. v[1])
            break
        end
    end
end

function actor_on_item_buy(item)
    calc_trading_exp(item)
end

function actor_on_item_sell(item)
    calc_trading_exp(item)
end

function ActorMenu_on_trade_started()
    RegisterScriptCallback("actor_on_item_take", actor_on_item_buy)
    RegisterScriptCallback("actor_on_item_drop", actor_on_item_sell)
end

function ActorMenu_on_trade_closed()
    UnregisterScriptCallback("actor_on_item_take", actor_on_item_buy)
    UnregisterScriptCallback("actor_on_item_drop", actor_on_item_sell)
end

function actor_on_footstep()
    local actor = db.actor -- code taken from arti encumbrance
    local tot_weight = actor:get_total_weight()
    local max_weight = actor:get_actor_max_weight()
    local outfit = actor:item_in_slot(7)
    local backpack = actor:item_in_slot(13)
    max_weight = max_weight + (outfit and outfit:get_additional_max_weight() or 0)
    max_weight = max_weight + (backpack and backpack:get_additional_max_weight() or 0)

    actor:iterate_belt(function(owner, obj)
        local c_arty = obj:cast_Artefact()
        max_weight = max_weight + (c_arty and c_arty:AdditionalInventoryWeight() or 0)
    end)

    actor:cast_Actor():conditions():BoosterForEach(function(booster_type, booster_time, booster_value)
        --eBoostMaxWeight
        if (booster_type == 4) then
            max_weight = max_weight + booster_value
        end
    end)

    local coef = tot_weight / max_weight
    exp_table.endurance_exp = exp_table.endurance_exp + (0.1 * coef * MUL)

    --printf("endurance exp: " .. exp_table.endurance_exp)
    --giving new level
    for k, v in pairs(level_endurance) do
        if not has_alife_info(v[1]) and exp_table.endurance_exp >= v[2] then
            give_info(v[1])
            exp_table.speed_modifier = v[3]
            exp_table.weight = v[4]
            exp_table.power_loss_bias = v[5]
            --printf("gave info:" .. v[1])
            break
        end
    end
end

--STAT UPDATER-----------------------------------------------------------------------------------
function setup_endurance()
    --setting up weight
    local skill_weight = exp_table.weight or 0.5
    local cw = math.ceil(game_difficulties.get_game_factor("weight") * skill_weight)
    local mww = cw + (math.ceil(cw / 5) * 2)

    if (cw ~= db.actor:get_actor_max_weight()) then
        db.actor:set_actor_max_weight(cw)
        db.actor:set_actor_max_walk_weight(mww)
    end

    --setting up power loss bias
    local pwb = exp_table.power_loss_bias or 0.6
    exec_console_cmd("power_loss_bias " .. tostring(pwb))
    --setting up speed
    local speed_modifier = exp_table.speed_modifier or 0.75
    speed.add_speed("haruka_endurance_modifier", speed_modifier, false, true)
end

function setup_resilience()
    local resilience_regen = exp_table.resilience_regen or 0
    db.actor:change_health(resilience_regen)
end

function roll_crit(npc, shit, bone_id, flags)
    if not (shit.draftsman and shit.draftsman:id() == 0) then
			printf("Skipping hit")
		return 
	end
    local mr = math.random(100)
    local chance = exp_table.crit_chance or 0

    printf("%s and %s", mr, chance)
    if mr <= chance then
        shit.power = shit.power * 2
        printf("Scored a crit!")
    end
    printf("Final hit power is "..shit.power)
end
--[[
function monster_on_before_hit(npc, shit, bone_id, flags)
    roll_crit(npc, shit, bone_id, flags)
end

function npc_on_before_hit(monster, shit, bone_id, flags)
    roll_crit(monster, shit, bone_id, flags)
end
]]

local last_tg = nil
local step = 1000

function update_stats()
    local tg = time_global()

    if not last_tg then
        last_tg = tg
    end

    if tg < last_tg + step then return end
    last_tg = nil
    local actor = db.actor
    setup_endurance()
    setup_resilience()
end

--DEBUG-----------------------------------------------------------------------------------------
function debug_hotkey(key)
    if (key == DIK_keys["DIK_K"]) then
		--[[
		printf("--Skill system stats--")
        printf("Trading exp: [%s]", math.floor(exp_table.trading_exp))
        printf("Endurance exp: [%s]", math.floor(exp_table.endurance_exp))
        printf("Resilience exp: [%s]", math.floor(exp_table.resilience_exp))
        printf("Trading skill | sell [%s] | buy [%s] |", exp_table.buy_skill or 1.3, exp_table.sell_skill or 0.85)
        printf("Endurance skill | speed [%s]| weight [%s] | power loss [%s] |", exp_table.speed_modifier or 0.75, exp_table.weight or 15, exp_table.power_loss_bias or 2)
        printf("Resilience skill | regen [%s]| crit [%s] |", exp_table.resilience_regen or 0, exp_table.crit_chance or 0)
		]]
		printf(utils_data.print_table(exp_table, "exp_table", 1))
    end
end

--CALLBACKS--------------------------------------------------------------------------------------
function on_game_start()
    if (USE_MARSHAL) then
        RegisterScriptCallback("save_state", save_state)
        RegisterScriptCallback("load_state", load_state)
    end

    RegisterScriptCallback("npc_on_before_hit", roll_crit)
    RegisterScriptCallback("monster_on_before_hit", roll_crit)
    RegisterScriptCallback("on_key_press", debug_hotkey)
    RegisterScriptCallback("actor_on_update", update_stats)
    RegisterScriptCallback("actor_on_before_hit", actor_on_before_hit)
    RegisterScriptCallback("on_game_load", on_game_load)
    RegisterScriptCallback("actor_on_footstep", actor_on_footstep)
    RegisterScriptCallback("ActorMenu_on_trade_started", ActorMenu_on_trade_started)
    RegisterScriptCallback("ActorMenu_on_trade_closed", ActorMenu_on_trade_closed)
end